// layout.tsx]
"use client";
import React, { ReactNode, useEffect, useState } from "react";
import { SessionProvider } from "next-auth/react";
import { Metadata } from "next";
import "./globals.css";
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { StateProvider } from "@/utils/useAppState";
// import { Plus_Jakarta_Sans } from "next/font/google";

// const inter = Plus_Jakarta_Sans({ subsets: ["vietnamese"] });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };
const initialState = {
  user: null,
};
const reducer = (state: any, action = {}) => {
  return {
    ...state,
    ...action,
  };
};
interface RootLayoutProps {
  children: ReactNode;
}

export default function RootLayout({ children }: RootLayoutProps) {
  const [darkmode, setDarkmode] = useState(false);

  useEffect(() => {
    if (localStorage.theme === "dark") {
      setThemeMode(true);
    }
    if (
      window.matchMedia("(prefers-color-scheme: dark)").matches &&
      localStorage?.theme === undefined
    ) {
      setThemeMode(true);
    }
  }, []);

  const setThemeMode = (isDark: boolean) => {
    if (
      !("theme" in localStorage) &&
      window.matchMedia("(prefers-color-scheme: dark)").matches
    ) {
      document.documentElement.classList.add("dark");
      isDark = true;
    }

    // setAppState({ isDark: isDark });
    if (isDark) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }
    setDarkmode(isDark);
  };

  return (
    <html lang="en">
      <StateProvider initialState={initialState} reducer={reducer}>
        <body className="bg-fgc dark:bg-fgc-dark text-text dark:text-text-dark text-sm md:text-base">
          <ToastContainer
            className={""}
            autoClose={5000}
            position="top-right"
          ></ToastContainer>
          <SessionProvider>{children}</SessionProvider>
        </body>
      </StateProvider>
    </html>
  );
}
